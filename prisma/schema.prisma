generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model MusicRelease {
  id              String   @id @default(cuid())
  music_name      String
  description     String
  buy_link        String?
  cover_art       String?
  soundcloud_link String?
  slug            String   @unique
  spotify_link    String?
  youtube_link    String?
  release_date    DateTime
  deezer_link     String?
  apple_link      String?
  artists         Artist[]
}

model Artist {
  id                String         @id @default(cuid())
  name              String         @unique
  is_casting_artist Boolean        @default(false)
  music_releases    MusicRelease[]
  casting_artist    CastingArtist?
}

model CastingArtist {
  id              String  @id @default(cuid())
  artist          Artist  @relation(fields: [artistId], references: [id])
  artistId        String  @unique
  description     String
  facebook_link   String?
  flag            String?
  instagram_link  String?
  picture         String?
  soundcloud_link String?
  slug            String  @unique
  spotify_link    String?
  youtube_link    String?
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STAFF
  ADMIN
  ARTIST
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(ARTIST)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
